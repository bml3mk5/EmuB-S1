	// interace or videomode
	int_vid = ((REG_INTERLACE_SEL) + (1 - (*videomode)));

	// bg color
	INIT_BRG_1(0,cb);
	EXPAND_BRG_1BIT(bg_color, 0xff, cb);
	DECODE_TO_PALETTE16_NUM(bg_color, b_p);

	// color filter for afterimage
	scrnline2m = 0;
	scrn = scrn0 + scrn_offset * screen_top;
	for(y = screen_top; y < screen_bottom; y++) {
		for(x = screen_left; x < screen_right; x++) {
			dot =scrn[x];
			r = (dot & Rmask);
			g = (dot & Gmask);
			b = (dot & Bmask);

			if (r > Rloss) r = r - Rloss;
			else r = 0;
			if (g > Gloss) g = g - Gloss;
			else g = 0;
			if (b > Bloss) b = b - Bloss;
			else b = 0;

			dot = r | g | b;

			scrnline1[y][x] = dot;
		}
		scrn += scrn_offset;
	}

	// scanline
	ys = (scanline ? 2 : 1);	// skip step
	yd = (scanline && ((regs[8] & 1) == 1 && sw == (screen_top & 1)) ? 1 : 0);	// odd line ?

	// set y axis position from the kind of drawing line
	SET_YAXIS_POSITION;

//emu->out_logf(LOG_DEBUG,_T("ii0:%d ii1:%d"),ii[0],ii[1]);
//for(i = 0; i < 3; i++) {
//	emu->out_logf(LOG_DEBUG,_T(" y:%d y0:%d y1:%d"),i,y0[i],y1[i]);
//}

	// out of disptmg area (top or bottom padding area)
	for(i = 0; i < ii[0]; i++) {
		buf_y = - top_raster + (VRAM_BUF_HEIGHT << 1) + y0[i];
		scrn = scrn0 + scrn_offset * y0[i];
		scrnf = scrnflag[0] + scrn_offset * y0[i];
//		scrnline1p = (afterimage != 0 ? scrnline1[0] + scrnline1_offset * y0[i] : scrnline2);
		scrnline1p = scrnline1[0] + scrnline1_offset * y0[i];
		SET_SCRNLINE2M(b_p.i & BRG_COLOR_IMASK);

		for(y = y0[i]; y < y1[i]; ) {
			buf_y = buf_y % VRAM_BUF_HEIGHT;
			buf_y_h = (buf_y & ~1);

			if (vsync_top_raster <= y && y < vsync_bottom_raster) {
				for(x = screen_left; x < screen_right; x++) {
					SET_SCRN_DOT(x, color64[0][0][0]);
					SET_SCRN_FILTER(x);
				}
			} else {
				for(x = screen_left; x < screen_right; x++) {
					if (hsync_left_col[buf_y_h] <= x && x < hsync_right_col[buf_y_h]) {
						SET_SCRN_DOT(x, color64[0][0][0]);
					} else {
						SET_SCRN_DOT_COLOR16(x, b_p.b.b, b_p.b.r, b_p.b.g, b_p.b.i);
					}
					SET_SCRN_FILTER(x);
				}
			}
			y+=ys;
			buf_y+=ys;
			scrn += scrn_offset * ys;
			scrnf += scrn_offset * ys;
			scrnline1p += scrnline1_offset * ys;
		}
	}

	// disptmp area
	for(i = ii[0]; i < ii[1]; i++) {
		buf_y = - top_raster + ((crt_mon_start_row + VRAM_BUF_HEIGHT) << 1) + y0[i];
		scrn = scrn0 + scrn_offset * y0[i];
		scrnf = scrnflag[0] + scrn_offset * y0[i];
//		scrnline1p = (afterimage != 0 ? scrnline1[0] + scrnline1_offset * y0[i] : scrnline2);
		scrnline1p = scrnline1[0] + scrnline1_offset * y0[i];
		SET_SCRNLINE2M(b_p.i & BRG_COLOR_IMASK);
		l = (crt_mon_start_raster + (top_raster <= bottom_raster ? 0 : raster_per_char - ((bottom_raster - 1) % raster_per_char) - 1)) | yd;

		for(y = y0[i]; y < y1[i]; ) {
			buf_y = buf_y % VRAM_BUF_HEIGHT;
			buf_y_h = (buf_y & ~1);

			// cursor line ?
			disp_cursor_line = (disp_cursor && cur_top <= y && y <= cur_bottom);

			// out of disptmg area (left padding area)
			x1 = (screen_right < left_col[buf_y_h] ? screen_right : left_col[buf_y_h]);
			for(x = screen_left; x < x1; ) {
				DISP_OUT_OF_DISPTMG;
				x++;
			}
			// out of disptmg area (right padding area)
			x1 = (screen_right < right_col[buf_y_h] ? screen_right : right_col[buf_y_h]);
			for(x = x1; x < screen_right; ) {
				DISP_OUT_OF_DISPTMG;
				x++;
			}

			// disptmg area
			buf_y_h = (buf_y & ~1);
			buf_y_h2 = cp_odd_line[buf_y_h] ? buf_y_h : buf_y;
			buf_x = left_col[buf_y_h] < 0 ? - left_col[buf_y_h] / ppch : 0 ;
			x0 = (screen_left > left_col[buf_y_h] ? screen_left : left_col[buf_y_h]);
			x1 = (screen_right < right_col[buf_y_h] ? screen_right : right_col[buf_y_h]);
			xodd = 0;

			if (NOW_S1_MODE) {
				// S1 mode
				for(x = x0; x < x1; ) {
					disp_cursor_char = (disp_cursor_line && cur_left[l] <= x && x < cur_right[l]);

					text_cram = crt_mon[buf_y_h][buf_x].color;

					// text character
					if ((text_cram & 0x50) != 0x10) {
						text_code = crt_mon[buf_y_h][buf_x].text;

						if (text_cram & 0x20) {
							// ig pattern
							ci[0].i = crt_mon[buf_y_h][buf_x].c.i;
							// reverse dot
							if (text_cram & 0x08) {
								ci[0].i = ~ci[0].i;
							}
							// cursor line ?
							if (disp_cursor_char) {
								ci[0].b.b = ((text_cram & 1) ? 0xff : 0);
								ci[0].b.r = ((text_cram & 2) ? 0xff : 0);
								ci[0].b.g = ((text_cram & 4) ? 0xff : 0);
								ci[0].b.i = 0;
							}
							// convert
							INIT_BRG_2(0,ct);
#ifdef EXPAND_ALGORITHM1
							// when width 40
							if ((text_cram & 0x80) == 0) {
								if (xodd) {
									bt0 = 0; btx0 = 1;
								} else {
									bt0 = 4; btx0 = 1;
								}
							} else {
								bt0 = 0; btx0 = 0;
							}
							for (bt = 0; bt < 8; bt++) {
								btx = (bt >> btx0) + bt0;
								iwk1.i = ((ci[0].i >> btx) & 0x01010101);
								ct[0].i |= (iwk1.i << bt);
							}
#else
							if ((text_cram & 0x80) == 0) {
								// when width 40
								if (xodd) {
									EXPAND_UINT32_LEFT(ci[0].i, ct[0].i);
								} else {
									EXPAND_UINT32_RIGHT(ci[0].i, ct[0].i);
								}
							} else {
								ct[0].i = ci[0].i;
							}
#endif
							CREATE_MASK_1(ct[0],ct_m);
						} else {
							// character
							pattern = chrfont[REG_INTERLACE_SEL][text_code][(l >> (1 - (*videomode))) & 0xf];
							// cursor line ?
							if (disp_cursor_char) {
								pattern = ~pattern;
							}
							// reverse dot
							if (text_cram & 0x08) {
								pattern = ~pattern;
							}
							INIT_BRG_2(0,ct);
#ifdef EXPAND_ALGORITHM1
							// when width 40
							if ((text_cram & 0x80) == 0) {
								if (xodd) {
									bt0 = 0; btx0 = 1;
								} else {
									bt0 = 4; btx0 = 1;
								}
							} else {
								bt0 = 0; btx0 = 0;
							}
							iwk1.i = crt_mon[buf_y_h][buf_x].c.i;
							for (bt = 0; bt < 8; bt++) {
								btx = (bt >> btx0) + bt0;
								if (pattern & (1 << btx)) ct[0].i |= ((iwk1.i & 0x01010101) << bt);
							}
#else
							if ((text_cram & 0x80) == 0) {
								// when width 40
								if (xodd) {
									EXPAND_UINT8_LEFT(pattern,pattern);
								} else {
									EXPAND_UINT8_RIGHT(pattern,pattern);
								}
							}
#if 1
							ct[0].i = (crt_mon[buf_y_h][buf_x].c.i & (pattern | ((uint32)pattern << 8) | ((uint32)pattern << 16) | ((uint32)pattern << 24)));
#else
							ct[0].b.b = (crt_mon[buf_y_h][buf_x].c.b.b & pattern);
							ct[0].b.r = (crt_mon[buf_y_h][buf_x].c.b.r & pattern);
							ct[0].b.g = (crt_mon[buf_y_h][buf_x].c.b.g & pattern);
							ct[0].b.i = (crt_mon[buf_y_h][buf_x].c.b.i & pattern);
#endif
#endif
							CREATE_MASK_1(ct[0],ct_m);
						}
					}
					// graphic
					attr = crt_mon[buf_y_h][buf_x].attr;
					if ((text_cram & 0x50) && (attr & DISP_PAGE_BRG_MASK)) {
						ci[0].i = (crt_mon[buf_y_h2][buf_x].g[0].i & crt_mon[buf_y_h][buf_x].brg_mask.i);

						if ((attr & SCRN_MODE_MASK) == SCRN_MODE_64COLOR_MASK) {
							// 64color
							ci[1].i = (crt_mon[buf_y_h2][buf_x].g[1].i & crt_mon[buf_y_h2][buf_x].brg_mask.i);
							INIT_BRG_2(0,cg);
#ifdef EXPAND_ALGORITHM1
							if ((crt_mon[buf_y_h][buf_x].attr & 0x02) == 0) {
								// when width 320
								if (xodd) {
									bt0 = 0; btx0 = 1;
								} else {
									bt0 = 4; btx0 = 1;
								}
							} else {
								bt0 = 0; btx0 = 0;
							}
							for (bt = 0; bt < 8; bt++) {
								btx = (bt >> btx0) + bt0;
								iwk1.i = ((ci[0].i >> btx) & 0x01010101);
								cg[0].i |= (iwk1.i << bt);
								iwk1.i = ((ci[1].i >> btx) & 0x01010101);
								cg[1].i |= (iwk1.i << bt);
							}
#else
							if ((crt_mon[buf_y_h][buf_x].attr & 0x02) == 0) {
								// when width 320
								if (xodd) {
									EXPAND_UINT32_LEFT(ci[0].i, cg[0].i);
									EXPAND_UINT32_LEFT(ci[1].i, cg[1].i);
								} else {
									EXPAND_UINT32_RIGHT(ci[0].i, cg[0].i);
									EXPAND_UINT32_RIGHT(ci[1].i, cg[1].i);
								}
							} else {
								cg[0] = ci[0];
								cg[1] = ci[1];
							}
#endif
							if (TVSUPER_DIGITAL) {
								// In digital RGB, 8 color mode
								CREATE_MASK_1(cg[0],iwk1);
								COPY_BRG_1_WITH_MASK(cg[1],cg[1],iwk1);
								cg[0].i |= cg[1].i;
								CREATE_MASK_1(cg[0],cg_m);

								if ((text_cram & 0x50) == 0x10) {
									// display graphic only
									COPY_BRG_1(cg[0],cd[0]);
								} else if ((text_cram & 0x50) == 0x40) {
									// display text and graphic (text is a top)
									COPY_BRG_1_WITH_MASK(cg[0],cd[0],ct_m);
									ADD_BRG_1(ct[0],cd[0]);
								} else {
									// display text and graphic (graphic is a top)
									COPY_BRG_1_WITH_MASK(ct[0],cd[0],cg_m);
									ADD_BRG_1(cg[0],cd[0]);
								}
								CREATE_MASK_1(cd[0],cd_m);
#ifndef PALETTE_PRESET
								// convert palette color
								INIT_BRG_1(0, cd2[0]);
								for(bt = 0; bt < 8; bt++) {
									ENCODE_PALETTE_ONE_DOT_1(bt, cd[0], cd2[0]);
								}
#endif
								// add bg color
								ADD_BRG_1_WITH_MASK(cb,cd2[0],cd_m);
								COPY_BRG_1(cd2[0],cd2[1]);

							} else {
								// analog RGB
								CREATE_MASK_2(cg,cg_m);

								if ((text_cram & 0x50) == 0x10) {
									// display graphic only
									COPY_BRG_2(cg,cd);
								} else if ((text_cram & 0x50) == 0x40) {
									// display text and graphic (text is a top)
									COPY_BRG_2_WITH_MASK(cg,cd,ct_m);
									ADD_BRG_1(ct[0],cd[0]);
									ADD_BRG_1(ct[0],cd[1]);
								} else {
									// display text and graphic (graphic is a top)
									COPY_BRG_1_WITH_MASK(ct[0],cd[0],cg_m);
									COPY_BRG_1(cd[0],cd[1]);
									ADD_BRG_2(cg,cd);
								}
								CREATE_MASK_2(cd,cd_m);
#ifndef PALETTE_PRESET
#if 1
								// non convert
								COPY_BRG_2(cd,cd2);
#else
								// convert palette color
								INIT_BRG_2(0, cd2);
								for(bt = 0; bt < 8; bt++) {
									ENCODE_PALETTE_ONE_DOT_2(bt, cd, cd2);
								}
#endif
#endif
								// add bg color
								ADD_BRG_1_WITH_MASK(cb,cd2[0],cd_m);
								ADD_BRG_1_WITH_MASK(cb,cd2[1],cd_m);
							}
						} else {
							// 
							INIT_BRG_2(0,cg);
#ifdef EXPAND_ALGORITHM1
							if ((crt_mon[buf_y_h][buf_x].attr & 0x02) == 0) {
								// when width 320
								if (xodd) {
									bt0 = 0; btx0 = 1;
								} else {
									bt0 = 4; btx0 = 1;
								}
							} else {
								bt0 = 0; btx0 = 0;
							}
							for (bt = 0; bt < 8; bt++) {
								btx = (bt >> btx0) + bt0;
								iwk1.i = ((ci[0].i >> btx) & 0x01010101);
								cg[0].i |= (iwk1.i << bt);
							}
#else
							if ((crt_mon[buf_y_h][buf_x].attr & 0x02) == 0) {
								// when width 320
								if (xodd) {
									EXPAND_UINT32_LEFT(ci[0].i, cg[0].i);
								} else {
									EXPAND_UINT32_RIGHT(ci[0].i, cg[0].i);
								}
							} else {
								cg[0] = ci[0];
							}
#endif
							CREATE_MASK_1(cg[0],cg_m);
							cg[1] = cg[0];

							if ((text_cram & 0x50) == 0x10) {
								// display graphic only
								COPY_BRG_1(cg[0],cd[0]);
							} else if ((text_cram & 0x50) == 0x40) {
								// display text and graphic (text is a top)
								COPY_BRG_1_WITH_MASK(cg[0],cd[0],ct_m);
								ADD_BRG_1(ct[0],cd[0]);
							} else {
								// display text and graphic (graphic is a top)
								COPY_BRG_1_WITH_MASK(ct[0],cd[0],cg_m);
								ADD_BRG_1(cg[0],cd[0]);
							}
							CREATE_MASK_1(cd[0],cd_m);
#ifndef PALETTE_PRESET
							if (TVSUPER_ANALOG || (attr & SCRN_MODE_MASK) == SCRN_MODE_640x400_MASK) {
								// non convert
								COPY_BRG_1(cd[0],cd2[0]);
								cd2[0].b.i = ~cd_m.b.i;
							} else {
								// convert palette color
								INIT_BRG_1(0, cd2[0]);
								for(bt = 0; bt < 8; bt++) {
									ENCODE_PALETTE_ONE_DOT_1(bt, cd[0], cd2[0]);
								}
							}
#endif
							// add bg color
							ADD_BRG_1_WITH_MASK(cb,cd2[0],cd_m);
							COPY_BRG_1(cd2[0],cd2[1]);
						}
					} else {
						// display text only
						COPY_BRG_1(ct[0],cd[0]);

						CREATE_MASK_1(cd[0],cd_m);
#ifndef PALETTE_PRESET
						if (TVSUPER_ANALOG || (attr & SCRN_MODE_MASK) == SCRN_MODE_640x400_MASK) {
							// non convert
							COPY_BRG_1(cd[0],cd2[0]);
							cd2[0].b.i = ~cd_m.b.i;
						} else {
							// convert palette color
							INIT_BRG_1(0, cd2[0]);
							for(bt = 0; bt < 8; bt++) {
								ENCODE_PALETTE_ONE_DOT_1(bt, cd[0], cd2[0]);
							}
						}
#endif
						// add bg color
						ADD_BRG_1_WITH_MASK(cb,cd2[0],cd_m);
						COPY_BRG_1(cd2[0],cd2[1]);
					}

#ifdef _DEBUG_CTRAM
	if (buf_x >= 30 && buf_y_h >= 44 && buf_y_h < 46) {
		emu->out_debugf(_T("usc txt: y:%d t:%02x c:%02x ct:%08x ctm:%08x cd:%08x"),buf_y_h,text_code,text_cram,ct[0].i,ct_m.i,cd[0].i);
	}
#endif

					// render
					if (TVSUPER_ANALOG && ((attr & SCRN_MODE_MASK) == SCRN_MODE_64COLOR_MASK)) {
						// 64color
						dt = x;
						for (bt = 0; bt < 8; bt++) {
							DECODE_BRG_2BIT_TO_PALETTE64(bt, cd2, t_p);
							dot = color64[t_p.b.b][t_p.b.r][t_p.b.g];
							SET_SCRNLINE2M(t_p.i);
							if (dt > SCREEN_WIDTH) break;
							SET_SCRN_DOT(dt, dot);
							SET_SCRN_FILTER(dt);
							dt++;
						}
					} else {
						// 16color
						dt = x;
						for (bt = 0; bt < 8; bt++) {
							DECODE_BRG_1BIT_TO_PALETTE16(bt, cd2, t_p);
							dot = color16[t_p.b.b][t_p.b.r][t_p.b.g][t_p.b.i];
							SET_SCRNLINE2M(t_p.i);
							if (dt > SCREEN_WIDTH) break;
							SET_SCRN_DOT(dt, dot);
							SET_SCRN_FILTER(dt);
							dt++;
						}
					}
					x += 8;
					buf_x++;
					xodd = (1 - xodd);
				}
			} else {
				// L3 mode
				for(x = x0; x < x1; ) {
					disp_cursor_char = (disp_cursor_line && cur_left[l] <= x && x < cur_right[l]);

					text_code = crt_mon[buf_y_h][buf_x].text;
					text_cram = crt_mon[buf_y_h][buf_x].color;
					c_f = (text_cram & 0x07) | 0x08;
					DECODE_TO_PALETTE16_NUM(c_f, t_p);
					c_b = bg_color;

					switch(text_cram & 0x30) {
					case 0x30:
					case 0x20:
						// ig
						// disp ig pattern
						DISP_L3_IG_PATTERN(text_code);
						break;
					case 0x10:
						// graphic
						if (text_cram & 8) text_code = ~text_code;
						if (disp_cursor_char) text_code = ~text_code;
						if (text_cram & 0x40) {
							// hireso graphic
							DISP_L3_GRAPHIC_HIRESO(text_code);
						} else {
							// normal graphic
							DISP_L3_GRAPHIC_NORMAL(text_code);
						}
						break;
					default:
						// character
						DISP_L3_TEXT_CHAR(text_code);
						break;
					}
					x += ppch;
					buf_x++;
				}
			}

			y+=ys;
			buf_y+=ys;
			scrn += scrn_offset * ys;
			scrnf += scrn_offset * ys;
			scrnline1p += scrnline1_offset * ys;
			l = ((l + ys) % raster_per_char);
		}
	}

	// clear non drawing line
	if (scanline) {
		yd = 1 - yd;
		scrn = scrn0 + scrn_offset * (screen_top | yd);
		scrnf = scrnflag[0] + scrn_offset * (screen_top | yd);
		scrnline1p = scrnline1[0] + scrnline1_offset * (screen_top | yd);
		for(y = (screen_top | yd); y < screen_bottom; ) {
			for(x = screen_left; x < screen_right; x++) {
				SET_SCRN_DOT(x, color64[0][0][0]);
			}
			y+=ys;
			scrn += scrn_offset * ys;
			scrnf += scrn_offset * ys;
			scrnline1p += scrnline1_offset * ys;
		}
	}
}

